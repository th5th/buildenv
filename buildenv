#!/bin/bash
# 
# buildenv
#
# A Bash script for managing sweet build environments.
#
# Copyright 2013  Ed Willson <ed.willson24@gmail.com>
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
# # Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# 

# Custom config
VERSION="0.1.1"
PKGPATH="/usr/local/etc/buildenv"

BUILDENV="buildenv $VERSION (c) 2013 Ed Willson <ed.willson24@gmail.com>"

E_SUCCESS=0
E_MINOR=1
E_MAJOR=2

# unpack the package in directory for type $1 into directory $2.
function unpack()
{
    tar --keep-newer-files -xzf "$PKGPATH"/"$1".tar.gz -C $2
    pushd $2
    shift 2 # any remaining arguments are made available to mkbuildenv.sh
    source mkbuildenv.sh
    rm mkbuildenv.sh
    popd
}

# pack the source under directory $1 into a tarball for type $2.
function pack()
{
    # Create a tarball for the whole directory.
    TARBALL=$PKGPATH/"$2".tar.gz
    tar  --exclude=$2.info -czf $TARBALL -C $1 `ls -A $1`
    if [ ! -e $TARBALL ]; then
        echo "Error: Could not create tarball."
        exit $E_MINOR
    elif [ -e "$1"/"$2".info ]; then
        cp -f "$1"/"$2".info $PKGPATH
    fi
}

case "$1" in
    list)
        if [ -e $PKGPATH ]; then
            if [ -z "`ls $PKGPATH`" ]; then
                echo "No available packages in $PKGPATH"
            else
                echo "Available packages in $PKGPATH:"
                for PKG in `ls $PKGPATH | grep .*\.tar\.gz | sed -e 's/.tar.gz//'`; do
                    if [ -e $PKGPATH/$PKG.info ]; then
                        INFO=`head -n 1 $PKGPATH/$PKG.info`
                        echo -e "  $PKG\t $INFO"
                    else
                        echo -e "  $PKG"
                    fi
                done
            fi
            exit $E_SUCCESS
        else
            echo "Error: $PKGPATH not found"
            exit $E_MAJOR
        fi
        ;;
    new)
        if [ ! -e $PKGPATH/"$2".tar.gz ]; then
            echo "Error: Supplied environment type ("$2") does not exist in $PKGPATH"
            exit $E_MINOR
        else
            TYPE=$2
            shift 2
        fi

        TARGETPATH=`pwd`

        if [ ! -z "$1" ]; then
            if [ "$1" != "--" ]; then
                TARGETPATH="$1"
                if [ ! -d "$TARGETPATH" ]; then mkdir -p $TARGETPATH; fi
            fi
            shift # use -- as end of buildenv options
        fi

        # Unpack this type, and pass any trailing args to the mkbuildenv.sh script.
        unpack $TYPE $TARGETPATH "$@"
        exit $E_SUCCESS
        ;;
    package)
        # Command to create a new build environment type from the current working dir.
        if [ -z "$2" ]; then
            echo "Error: Must provide type name to package command."
            exit $E_MAJOR
        fi

        if [ ! -z "$3" ]; then
            SOURCEPATH="$3"
        else
            SOURCEPATH=`pwd`
        fi

        # Checks for existence of mkbuildenv.sh.
        if [ -d "$SOURCEPATH" ] && [ -e "$SOURCEPATH"/mkbuildenv.sh ]; then
            pack "$SOURCEPATH" "$2"
        else
            echo "Error: Specified source path does not exist or does not contain a mkbuildenv.sh file."
            exit $E_MAJOR
        fi

        exit $E_SUCCESS
        ;;
    remove)
        if [ -z "$2" ]; then
            echo "Error: Must provide type name to remove command."
            exit $E_MAJOR
        fi

        if [ ! -e $PKGPATH/"$2".tar.gz ]; then
            echo "Error: Supplied environment type ("$2") does not exist in $PKGPATH"
            exit $E_MINOR
        else
            rm -f $PKGPATH/"$2".tar.gz
        fi
        
        if [ -e $PKGPATH/"$2".info ]; then
            rm -f $PKGPATH/"$2".info
        fi

        exit ${E_SUCCESS}
        ;;
    *)
        echo "${BUILDENV}"
        echo "Usage: ${0##*/} new <type> [path | --] [mkbuildenv.sh options]"
        echo "                package <type> [path]"
        echo "                remove <type>"
        echo "                list"
        exit $E_MAJOR
        ;;
esac
